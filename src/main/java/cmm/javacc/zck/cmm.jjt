options { 
    STATIC = false;
}

PARSER_BEGIN(CMMParser) 
package cmm.javacc.zck;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;

public class CMMParser {
    static final String TEST_FILE_PATH = "C:\\Users\\andys\\source\\repos\\cmm-javacc-zck\\src\\main\\java\\cmm\\javacc\\zck\\test.cmm";
    public static void main( String[] args ) throws ParseException, TokenMgrError, FileNotFoundException {
        File file = new File(TEST_FILE_PATH);
        BufferedReader br = new BufferedReader(new FileReader(file));
        CMMParser parser = new CMMParser(br);
        SimpleNode root = parser.Sentences();
        root.dump("");
    }
}
PARSER_END(CMMParser)

SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" | "\t" }
SKIP : { "/*" : WithinMultiComment }
<WithinMultiComment> SKIP : { "*/" : DEFAULT}
<WithinMultiComment> MORE : { < ~[] > }
SKIP : { "//" : WithinLineComment }
<WithinLineComment> SKIP : { "\r" | "\n" | "\r\n" : DEFAULT}
<WithinLineComment> MORE : { < ~[] > }

TOKEN : { < IF: "if" > }
TOKEN : { < ELSE: "else" > }
TOKEN : { < WHILE: "while" > }
TOKEN : { < BREAK: "break" > }
TOKEN : { < CONTINUE: "continue" > }
TOKEN : { < RETURN: "return" > }
TOKEN : { < INT: "int" > }
TOKEN : { < REAL: "real" > }
TOKEN : { < CHAR: "char" > }
TOKEN : { < VOID: "void" > }
TOKEN : { < LCB: "{" > }
TOKEN : { < RCB: "}" > }
TOKEN : { < SEMI: ";" > }
TOKEN : { < LRB: "(" > }
TOKEN : { < RRB: ")" > }
TOKEN : { < ASN: "=" > }
TOKEN : { < LSB: "[" > }
TOKEN : { < RSB: "]" > }
TOKEN : { < LT: "<" > }
TOKEN : { < LTE: "<=" > }
TOKEN : { < EQ: "==" > }
TOKEN : { < NEQ: "<>" > }
TOKEN : { < GT: ">" > }
TOKEN : { < GTE: ">=" > }
TOKEN : { < ADD: "+" > }
TOKEN : { < SUB: "-" > }
TOKEN : { < MUL: "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < CMMA: "," > }
TOKEN : { < LAND: "&&" > }
TOKEN : { < BAND: "&" > }
TOKEN : { < LOR: "||" > }
TOKEN : { < BOR: "|" > }
TOKEN : { < BXOR: "^" > }
TOKEN : { < LNT: "!" > }
TOKEN : { < BNT: "~" > }
TOKEN : { < DEC: "--" > }
TOKEN : { < INC: "++" > }
TOKEN : { < MOD: "%" > }
TOKEN : { < ID: ["A"-"Z", "a"-"z"] ((["A"-"Z", "a"-"z", "0"-"9", "_"])* ["A"-"Z", "a"-"z", "0"-"9"])? > }
TOKEN : { < ILT: ("0" ["X", "x"] (["0"-"9", "A"-"F", "a"-"f"])+) | ((<DIGITS>)+) > }
TOKEN : { < RLT: ((((<DIGITS>)+ "." (<DIGITS>)*) | ((<DIGITS>)* "." (<DIGITS>)+)) (["e", "E"] (["+", "-"])? (<DIGITS>)+)?) | ((<DIGITS>)+ ["e", "E"] (["+", "-"])? (<DIGITS>)+) > }
TOKEN : { < #DIGITS: ["0"-"9"] > }
TOKEN : { < CLT: "'"  (("\\" (~[])) | (~["'", "\\"])) "'"  > }
TOKEN : { < SLT: "\""  (("\\" (~[])) | (~["\"", "\\"]))* "\"" > }

SimpleNode Sentences() #Sentences : {}
{
  Sentence() Sentences_() 
  (
    <EOF>
    | Empty()
  )
  {return jjtThis;}
}
void Empty() #Empty : {}
{
  {}
}
void Sentence() #Sentence : {}
{
  Type() 
  (
    LOOKAHEAD(DeclVarExpr() LCB() Sentences() RCB()) DeclVarExpr() LCB() Sentences() RCB() Sentence_() 
    | DeclCommaExpr() SEMI() Sentence_() 
  )
  | IF() LRB() CommaExpr() RRB() Sentence() 
  (
    ELSE() Sentence() Sentence_() 
    | Sentence_() 
  )
  | RETURN() 
  (
    CommaExpr() SEMI() Sentence_() 
    | SEMI() Sentence_() 
  )
  | LCB() Sentences() RCB() Sentence_() 
  | CommaExpr() SEMI() Sentence_() 
  | WHILE() LRB() CommaExpr() RRB() Sentence() Sentence_() 
  | BREAK() SEMI() Sentence_() 
  | CONTINUE() SEMI() Sentence_() 
  | SEMI() Sentence_() 
}
void FuncParamBracketExpr() #FuncParamBracketExpr : {}
{
  LRB() 
  (
    RRB() FuncParamBracketExpr_() 
    | FuncParamCommaExpr() RRB() FuncParamBracketExpr_() 
  )
}
void FuncParamCommaExpr() #FuncParamCommaExpr : {}
{
  FuncParamExpr() FuncParamCommaExpr_() 
}
void FuncParamExpr() #FuncParamExpr : {}
{
  Type() 
  (
    LOOKAHEAD(DeclVarExpr()) DeclVarExpr() FuncParamExpr_() 
    | DeclTypeExpr() FuncParamExpr_() 
    | FuncParamExpr_()
  ) 
}
void DeclCommaExpr() #DeclCommaExpr : {}
{
  DeclExpr() DeclCommaExpr_() 
}
void DeclExpr() #DeclExpr : {}
{
  DeclVarExpr() 
  (
    ASN()
    (
      AssignExpr() DeclExpr_() 
      | LCB() CommaExpr() RCB() DeclExpr_() 
    )
    | DeclExpr_()
  )
}
void Type() #Type : {}
{
  INT() Type_() 
  | REAL() Type_() 
  | CHAR() Type_() 
  | VOID() Type_() 
}
void Literal() #Literal : {}
{
  ILT() Literal_() 
  | RLT() Literal_() 
  | CLT() Literal_() 
  | SLT() Literal_() 
}
void CommaExpr() #CommaExpr : {}
{
  AssignExpr() CommaExpr_() 
}
void AssignExpr() #AssignExpr : {}
{
  LogicOrExpr()
  (
    ASN() AssignExpr() AssignExpr_()  
    | AssignExpr_() 
  ) 
}
void LogicOrExpr() #LogicOrExpr : {}
{
  LogicAndExpr() LogicOrExpr_() 
}
void LogicAndExpr() #LogicAndExpr : {}
{
  BitOrExpr() LogicAndExpr_() 
}
void BitOrExpr() #BitOrExpr : {}
{
  BitExOrExpr() BitOrExpr_() 
}
void BitExOrExpr() #BitExOrExpr : {}
{
  BitAndExpr() BitExOrExpr_() 
}
void BitAndExpr() #BitAndExpr : {}
{
  RelExpr() BitAndExpr_() 
}
void RelExpr() #RelExpr : {}
{
  AddSubExpr() RelExpr_() 
}
void RelOp() #RelOp : {}
{
  LT() RelOp_() 
  | LTE() RelOp_() 
  | EQ() RelOp_() 
  | NEQ() RelOp_() 
  | GT() RelOp_() 
  | GTE() RelOp_() 
}
void AddSubExpr() #AddSubExpr : {}
{
  MulDivExpr() AddSubExpr_() 
}
void AddSubOp() #AddSubOp : {}
{
  ADD() AddSubOp_() 
  | SUB() AddSubOp_() 
}
void MulDivExpr() #MulDivExpr : {}
{
  UnaryExpr() MulDivExpr_() 
}
void MulDivOp() #MulDivOp : {}
{
  MUL() MulDivOp_() 
  | DIV() MulDivOp_() 
  | MOD() MulDivOp_() 
}
void UnaryExpr() #UnaryExpr : {}
{
  UnaryOp() UnaryExpr() UnaryExpr_() 
  | PostUnaryExpr() UnaryExpr_() 
}
void UnaryOp() #UnaryOp : {}
{
  ADD() UnaryOp_() 
  | SUB() UnaryOp_() 
  | MUL() UnaryOp_() 
  | BAND() UnaryOp_() 
  | LNT() UnaryOp_() 
  | BNT() UnaryOp_() 
  | INC() UnaryOp_() 
  | DEC() UnaryOp_() 
}
void PostUnaryExpr() #PostUnaryExpr : {}
{
  BracketExpr() PostUnaryExpr_() 
}
void PostUnaryOp() #PostUnaryOp : {}
{
  INC() PostUnaryOp_() 
  | DEC() PostUnaryOp_() 
  | LRB() 
  (
    RRB() PostUnaryOp_() 
    | CommaExpr() RRB() PostUnaryOp_() 
  )
  | LSB() CommaExpr() RSB() PostUnaryOp_() 
}
void BracketExpr() #BracketExpr : {}
{
  LRB() CommaExpr() RRB() BracketExpr_() 
  | ID() BracketExpr_() 
  | ILT() Literal_() BracketExpr_() 
  | RLT() Literal_() BracketExpr_() 
  | CLT() Literal_() BracketExpr_() 
  | SLT() Literal_() BracketExpr_() 
}
void DeclVarExpr() #DeclVarExpr : {}
{
  MUL() DeclVarExpr() DeclVarExpr_() 
  | DeclVarArrFuncExpr() DeclVarExpr_() 
}
void DeclVarArrFuncExpr() #DeclVarArrFuncExpr : {}
{
  DeclVarBracketExpr() DeclVarArrFuncExpr_() 
}
void DeclVarBracketExpr() #DeclVarBracketExpr : {}
{
  LRB() DeclVarExpr() RRB() DeclVarBracketExpr_() 
  | ID() DeclVarBracketExpr_() 
}
void DeclTypeExpr() #DeclTypeExpr : {}
{
  MUL() 
  (
    DeclTypeExpr() DeclTypeExpr_() 
    | DeclTypeExpr_() 
  )
  | DeclTypeArrFuncExpr() DeclTypeExpr_() 
}
void DeclTypeArrFuncExpr() #DeclTypeArrFuncExpr : {}
{
  LOOKAHEAD(DeclTypeBracketExpr()) DeclTypeBracketExpr() DeclTypeArrFuncExpr_() 
  | LSB() (
    RSB() DeclTypeArrFuncExpr_() 
    | ILT() RSB() DeclTypeArrFuncExpr_() 
  )
  | LRB() (
    RRB() FuncParamBracketExpr_() DeclTypeArrFuncExpr_() 
    | FuncParamCommaExpr() RRB() FuncParamBracketExpr_() DeclTypeArrFuncExpr_() 
  )
}
void DeclTypeBracketExpr() #DeclTypeBracketExpr : {}
{
  LRB() DeclTypeExpr() RRB() DeclTypeBracketExpr_() 
}
void Sentences_() #Sentences_ : {}
{
  Sentence() Sentences_() 
  | Empty() 
}
void Sentence_() #Sentence_ : {}
{
  Empty() 
}
void FuncParamBracketExpr_() #FuncParamBracketExpr_ : {}
{
  Empty() 
}
void FuncParamCommaExpr_() #FuncParamCommaExpr_ : {}
{
  CMMA() FuncParamExpr() FuncParamCommaExpr_() 
  | Empty() 
}
void FuncParamExpr_() #FuncParamExpr_ : {}
{
  Empty() 
}
void DeclCommaExpr_() #DeclCommaExpr_ : {}
{
  CMMA() DeclExpr() DeclCommaExpr_() 
  | Empty() 
}
void DeclExpr_() #DeclExpr_ : {}
{
  Empty() 
}
void Type_() #Type_ : {}
{
  Empty() 
}
void Literal_() #Literal_ : {}
{
  Empty() 
}
void CommaExpr_() #CommaExpr_ : {}
{
  CMMA() AssignExpr() CommaExpr_() 
  | Empty() 
}
void AssignExpr_() #AssignExpr_ : {}
{
  Empty() 
}
void LogicOrExpr_() #LogicOrExpr_ : {}
{
  LOR() LogicAndExpr() LogicOrExpr_() 
  | Empty() 
}
void LogicAndExpr_() #LogicAndExpr_ : {}
{
  LAND() BitOrExpr() LogicAndExpr_() 
  | Empty() 
}
void BitOrExpr_() #BitOrExpr_ : {}
{
  BOR() BitExOrExpr() BitOrExpr_() 
  | Empty() 
}
void BitExOrExpr_() #BitExOrExpr_ : {}
{
  BXOR() BitAndExpr() BitExOrExpr_() 
  | Empty() 
}
void BitAndExpr_() #BitAndExpr_ : {}
{
  BAND() RelExpr() BitAndExpr_() 
  | Empty() 
}
void RelExpr_() #RelExpr_ : {}
{
  RelOp() AddSubExpr() RelExpr_() 
  | Empty() 
}
void RelOp_() #RelOp_ : {}
{
  Empty() 
}
void AddSubExpr_() #AddSubExpr_ : {}
{
  AddSubOp() MulDivExpr() AddSubExpr_() 
  | Empty() 
}
void AddSubOp_() #AddSubOp_ : {}
{
  Empty() 
}
void MulDivExpr_() #MulDivExpr_ : {}
{
  MulDivOp() UnaryExpr() MulDivExpr_() 
  | Empty() 
}
void MulDivOp_() #MulDivOp_ : {}
{
  Empty() 
}
void UnaryExpr_() #UnaryExpr_ : {}
{
  Empty() 
}
void UnaryOp_() #UnaryOp_ : {}
{
  Empty() 
}
void PostUnaryExpr_() #PostUnaryExpr_ : {}
{
  PostUnaryOp() PostUnaryExpr_() 
  | Empty() 
}
void PostUnaryOp_() #PostUnaryOp_ : {}
{
  Empty() 
}
void BracketExpr_() #BracketExpr_ : {}
{
  Empty() 
}
void DeclVarExpr_() #DeclVarExpr_ : {}
{
  Empty() 
}
void DeclVarArrFuncExpr_() #DeclVarArrFuncExpr_ : {}
{
  LSB() 
  (
    RSB() DeclVarArrFuncExpr_() 
    | ILT() RSB() DeclVarArrFuncExpr_() 
  )
  | FuncParamBracketExpr() DeclVarArrFuncExpr_() 
  | Empty() 
}
void DeclVarBracketExpr_() #DeclVarBracketExpr_ : {}
{
  Empty() 
}
void DeclTypeExpr_() #DeclTypeExpr_ : {}
{
  Empty() 
}
void DeclTypeArrFuncExpr_() #DeclTypeArrFuncExpr_ : {}
{
  LSB() 
  (
    RSB() DeclTypeArrFuncExpr_() 
    | ILT() RSB() DeclTypeArrFuncExpr_() 
  )
  | FuncParamBracketExpr() DeclTypeArrFuncExpr_() 
  | Empty() 
}
void DeclTypeBracketExpr_() #DeclTypeBracketExpr_ : {}
{
  Empty() 
}
void IF() #IF : { Token t; }
{
  t = <IF> { jjtThis.value = t.image; }
}
void ELSE() #ELSE : { Token t; }
{
  t = <ELSE> { jjtThis.value = t.image; }
}
void WHILE() #WHILE : { Token t; }
{
  t = <WHILE> { jjtThis.value = t.image; }
}
void BREAK() #BREAK : { Token t; }
{
  t = <BREAK> { jjtThis.value = t.image; }
}
void CONTINUE() #CONTINUE : { Token t; }
{
  t = <CONTINUE> { jjtThis.value = t.image; }
}
void RETURN() #RETURN : { Token t; }
{
  t = <RETURN> { jjtThis.value = t.image; }
}
void INT() #INT : { Token t; }
{
  t = <INT> { jjtThis.value = t.image; }
}
void REAL() #REAL : { Token t; }
{
  t = <REAL> { jjtThis.value = t.image; }
}
void CHAR() #CHAR : { Token t; }
{
  t = <CHAR> { jjtThis.value = t.image; }
}
void VOID() #VOID : { Token t; }
{
  t = <VOID> { jjtThis.value = t.image; }
}
void LCB() #LCB : { Token t; }
{
  t = <LCB> { jjtThis.value = t.image; }
}
void RCB() #RCB : { Token t; }
{
  t = <RCB> { jjtThis.value = t.image; }
}
void SEMI() #SEMI : { Token t; }
{
  t = <SEMI> { jjtThis.value = t.image; }
}
void LRB() #LRB : { Token t; }
{
  t = <LRB> { jjtThis.value = t.image; }
}
void RRB() #RRB : { Token t; }
{
  t = <RRB> { jjtThis.value = t.image; }
}
void ASN() #ASN : { Token t; }
{
  t = <ASN> { jjtThis.value = t.image; }
}
void LSB() #LSB : { Token t; }
{
  t = <LSB> { jjtThis.value = t.image; }
}
void RSB() #RSB : { Token t; }
{
  t = <RSB> { jjtThis.value = t.image; }
}
void LT() #LT : { Token t; }
{
  t = <LT> { jjtThis.value = t.image; }
}
void LTE() #LTE : { Token t; }
{
  t = <LTE> { jjtThis.value = t.image; }
}
void EQ() #EQ : { Token t; }
{
  t = <EQ> { jjtThis.value = t.image; }
}
void NEQ() #NEQ : { Token t; }
{
  t = <NEQ> { jjtThis.value = t.image; }
}
void GT() #GT : { Token t; }
{
  t = <GT> { jjtThis.value = t.image; }
}
void GTE() #GTE : { Token t; }
{
  t = <GTE> { jjtThis.value = t.image; }
}
void ADD() #ADD : { Token t; }
{
  t = <ADD> { jjtThis.value = t.image; }
}
void SUB() #SUB : { Token t; }
{
  t = <SUB> { jjtThis.value = t.image; }
}
void MUL() #MUL : { Token t; }
{
  t = <MUL> { jjtThis.value = t.image; }
}
void DIV() #DIV : { Token t; }
{
  t = <DIV> { jjtThis.value = t.image; }
}
void CMMA() #CMMA : { Token t; }
{
  t = <CMMA> { jjtThis.value = t.image; }
}
void LAND() #LAND : { Token t; }
{
  t = <LAND> { jjtThis.value = t.image; }
}
void BAND() #BAND : { Token t; }
{
  t = <BAND> { jjtThis.value = t.image; }
}
void LOR() #LOR : { Token t; }
{
  t = <LOR> { jjtThis.value = t.image; }
}
void BOR() #BOR : { Token t; }
{
  t = <BOR> { jjtThis.value = t.image; }
}
void BXOR() #BXOR : { Token t; }
{
  t = <BXOR> { jjtThis.value = t.image; }
}
void LNT() #LNT : { Token t; }
{
  t = <LNT> { jjtThis.value = t.image; }
}
void BNT() #BNT : { Token t; }
{
  t = <BNT> { jjtThis.value = t.image; }
}
void DEC() #DEC : { Token t; }
{
  t = <DEC> { jjtThis.value = t.image; }
}
void INC() #INC : { Token t; }
{
  t = <INC> { jjtThis.value = t.image; }
}
void MOD() #MOD : { Token t; }
{
  t = <MOD> { jjtThis.value = t.image; }
}
void ILT() #ILT : { Token t; }
{
  t = <ILT> { jjtThis.value = t.image; }
}
void RLT() #RLT : { Token t; }
{
  t = <RLT> { jjtThis.value = t.image; }
}
void CLT() #CLT : { Token t; }
{
  t = <CLT> { jjtThis.value = t.image; }
}
void SLT() #SLT : { Token t; }
{
  t = <SLT> { jjtThis.value = t.image; }
}
void ID() #ID : { Token t; }
{
  t = <ID> { jjtThis.value = t.image; }
}